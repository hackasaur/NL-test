{"version":3,"sources":["logo.svg","components/card.jsx","components/cards.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Card","className","style","cursor","href","this","props","data","url","src","require","alt","id","headline","subheadline","dangerouslySetInnerHTML","__html","text","title","author","onClick","onLove","role","aria-label","love","Component","Cards","state","localStorage","handleLoveEvent","setItem","setState","items","searchExists","undefined","ids","map","item","story","renderCard","details","type","sectionName","sections","name","comments","storyElements","getItem","card","key","includes","darkModeToggle","document","body","classList","toggle","App","searchChangeHandler","event","filter","target","value","searchSubmitHandler","preventDefault","results","toUpperCase","indexOf","push","data-toggle","data-target","aria-controls","aria-expanded","onSubmit","placeholder","onChange","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.71f36fd3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react'\n\nclass Card extends Component {\n \n\n    render() {\n        return (\n                <div className=\"card bg-transparent border rounded-0\" style={{cursor: \"pointer\" }}>\n                    <a href={this.props.data.url}>\n                        <img src={require('../logo.svg')} className=\"card-img-top\" alt=\"news laundry\"></img>\n                        <div className=\"card-body\">\n                            <h5 id=\"headline\" className=\"card-title text-center\">{this.props.data.headline}</h5>\n                            <h6 id=\"subheadline\" className=\"card-subtitle mb-2 text-muted text-center\">{this.props.data.subheadline}</h6>\n                            <p id=\"content\" className=\"card-text text-justify\" dangerouslySetInnerHTML={{ __html: this.props.text }}></p>\n                            <footer id=\"author\" className=\" blockquote-footer text-right\">\n                                <small className=\"text-muted \">\n                                    <cite title=\"author\">{this.props.data.author}</cite>\n                                </small>\n                            </footer>\n                            <footer className=\"text-left\">\n                                <small className=\"text-muted \">\n                                    <button className=\"btn btn-sm\" onClick={() => {this.props.onLove(this.props.data.id)}}><span role=\"img\" aria-label = \"heart\">{this.props.love}</span></button>\n                                </small>\n                            </footer>\n                        </div>\n                    </a>\n                </div>\n        )\n    }\n}\n\nexport default Card","import React, { Component } from 'react'\nimport Card from './card'\n\n// let data = {}\n// let items = []\n// let data = require('../data.json')\n// let items = data.items\n// const fetchDataFromApi = async () => {\n//   const res = await fetch(\"http://localhost:8000/data\")\n//   data = await res.json()\n//   items = data.items\n//   console.log(data)\n// }\n\nclass Cards extends Component {\n  state = localStorage\n\n  handleLoveEvent = (id) => {\n    let love = \"\"\n    if (id in this.state) {\n      if (this.state[id] === \"ü§ç\") {\n        love = \"‚ù§Ô∏è\"\n      }\n\n      else if (this.state[id] === \"‚ù§Ô∏è\") {\n        love = \"ü§ç\"\n      }\n    }\n\n    else if (id in this.state === false) {\n      love = \"‚ù§Ô∏è\"\n    }\n\n    localStorage.setItem(id, love)\n\n    this.setState(localStorage)\n  }\n\n  render() {\n    let data, items\n    let searchExists = false\n    if (this.props.ids !== undefined) {\n      searchExists = true\n    }\n    if (this.props.data !== undefined) {\n      data=this.props.data\n      items = data.items\n    }\n    else{\n      data ={}\n      items =[]\n    }\n    \n\n    return (\n      < div className=\"card-columns mx-auto my-4\" >\n        {\n          items.map((item) => {\n            let story = item.story\n            let renderCard = () => {\n              let details = {\n                id: item.id,\n                type: item.type,\n                url: item.url,\n                sectionName: story.sections[0].name,\n                author: story[\"author-name\"],\n                headline: story[\"headline\"],\n                subheadline: story[\"subheadline\"],\n                comments: story[\"comments\"],\n                storyElements: story[\"cards\"][0][\"story-elements\"],\n              }\n              let text = \"\"\n              for (let element of details.storyElements) {\n                text += element.text\n              }\n\n              let love = \"ü§ç\"\n              if (item.id in this.state) {\n                love = localStorage.getItem(item.id)\n              }\n              return { details: details, text: text, love: love }\n            }\n\n            if (searchExists) {\n              if (this.props.ids.includes(item.id)) {\n                let card = renderCard()\n                return <Card key={item.id} data={card.details} text={card.text} love={card.love} onLove={this.handleLoveEvent} />\n              }\n            }\n            else {\n              let card = renderCard()\n              return <Card key={item.id} data={card.details} text={card.text} love={card.love} onLove={this.handleLoveEvent} />\n            }\n          })\n        }\n      </div>\n    )\n  }\n}\n\nexport default Cards;","import React, { Component } from 'react'\nimport Cards from './components/cards'\n\nfunction darkModeToggle() {\n  let element = document.body\n  element.classList.toggle(\"dark-mode\")\n}\n\nlet data = {}\nlet items = []\n//comment this when workin with api\ndata = require('./data.json')\nitems = data.items\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      filter: \"\",\n      data: data\n    }\n  }\n  searchChangeHandler = (event) => {\n    let filter = event.target.value\n    this.setState({ filter: filter })\n  }\n\n  searchSubmitHandler = (event) => {\n    event.preventDefault()\n    let filter = this.state.filter\n    let results = { ids: [] }\n    filter = filter.toUpperCase()\n    for (let item of items) {\n      let headline = item[\"story\"][\"headline\"]\n      if (headline.toUpperCase().indexOf(filter) > -1) {\n        results.ids.push(item.id)\n      }\n      // else if (headline.toUpperCase().indexOf(filter) === -1) {\n      //   console.log(\"nothing found\")\n      // }\n    }\n    this.setState(results)\n  }\n  /*NOTE: uncomment this to work with api\n  fetchDataFromApi() {\n    const self = this\n    fetch(\"http://localhost:8081/data\")\n      .then(response => response.json())\n      .then(info => {\n        data = info\n        items = data.items\n        self.setState({ data: data })\n      })\n  }\n\n  componentDidMount() {\n    this.fetchDataFromApi()\n  }\n*/\n  render() {\n    return (\n      <div>\n        {/* heading logo*/}\n        <div id=\"logo\" className=\"head logo\">\n          Newslaundry\n        </div>\n        {/* navbar */}\n        <nav className=\"navbar navbar-expand-md navbar-light bg-transparent justify-content-center subhead\">\n          {/* <p id=\"date\" className=\"d-flex w-50 mr-auto\"></p> */}\n          <div className=\"d-flex w-50 mr-auto\">\n          <button id=\"darkModeToggler\" className=\"btn btn-sm btn-outline-dark ml-2 rounded-0\" onClick={darkModeToggle}><span role=\"img\" aria-label=\"moon\">üåô</span></button>\n          </div>\n          <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n            <span className=\"navbar-toggler-icon\"></span>\n          </button>\n          <div className=\"collapse navbar-collapse w-100\" id=\"navbarNav\">\n            <ul className=\"navbar-nav w-100 justify-content-center\">\n              <li className=\"nav-item active\">\n                <a className=\"nav-link\" href=\"/\">Home <span className=\"sr-only\">(current)</span></a>\n              </li>\n              <li className=\"nav-item\">\n                <a className=\"nav-link\" href=\"/\">Topics</a>\n              </li>\n              <li className=\"nav-item\">\n                <a className=\"nav-link\" href=\"/\">About</a>\n              </li>\n            </ul>\n            <ul className=\"navbar-nav w-100 ml-auto justify-content-end\">\n              <li className=\"nav-item active\">\n                <form className=\"form-inline\" onSubmit={this.searchSubmitHandler}>\n                  <div className=\"input-group mx-2\">\n                    <input\n                      id=\"searchBox\"\n                      className=\"form-control font-control-sm rounded-0\"\n                      type=\"search\"\n                      placeholder=\"Search...\"\n                      aria-label=\"Search\"\n                      value={this.state.filter}\n                      onChange={this.searchChangeHandler}\n                    >\n                    </input>\n                    <div className=\"input-group-append\">\n                      <button id=\"searchButton\" className=\"btn btn-sm btn-outline-dark rounded-0\" type=\"button\"><span role=\"img\" aria-label=\"magnifying glass\">üîé</span></button>\n                    </div>\n                  </div>\n                </form>\n              </li>\n            </ul>\n          </div>\n        </nav>\n        {/* cards */}\n        <Cards ids={this.state.ids} data={this.state.data} />\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App'\nimport './index.css'\nimport * as serviceWorker from './serviceWorker';\n\n// let n =  new Date()\n// let y = n.getFullYear()\n// let m = n.getMonth() + 1\n// let d = n.getDate()\n\nReactDOM.render(\n    <App />\n ,\n  document.getElementById('root')\n);\n\n// document.getElementById(\"date\").innerHTML = d + \"/\" + m + \"/\" + y\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}